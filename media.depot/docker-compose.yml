version: '2'

services:

    # ----------------------------------------
    # Web Services
    # ----------------------------------------

    nginx-proxy:
        image: jwilder/nginx-proxy
        container_name: nginx-proxy
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:80:80'
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            
    uhttpd:
        image: fnichol/uhttpd
        container_name: landing
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:8080:80'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
            - VIRTUAL_HOST=media.depot.local
            - VIRTUAL_PORT=8080
        volumes:
            - './www:/www'

    # ----------------------------------------
    # Services
    # ----------------------------------------

    sickrage:
        image: linuxserver/sickrage
        container_name: sickrage
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:8081:8081'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './sickrage:/config'
            - './content/downloads:/downloads'
            - './content/tv:/tv'
            - '/etc/localtime:/etc/localtime:ro'

    couchpotato:
        image: linuxserver/couchpotato
        container_name: couchpotato
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:5050:5050'
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './couchpotato:/config'
            - './content/downloads:/downloads'
            - './content/movies:/movies'
            - '/etc/localtime:/etc/localtime:ro'

    plex:
        container_name: plex
        image: plexinc/pms-docker:${PMSTAG}
        restart: always
        network_mode: "host"
        ports:
            - ${IP_ADDRESS}:32400:32400/tcp
            - ${IP_ADDRESS}:3005:3005/tcp
            - ${IP_ADDRESS}:8324:8324/tcp
            - ${IP_ADDRESS}:32469:32469/tcp
            - ${IP_ADDRESS}:1900:1900/udp
            - ${IP_ADDRESS}:32410:32410/udp
            - ${IP_ADDRESS}:32412:32412/udp
            - ${IP_ADDRESS}:32413:32413/udp
            - ${IP_ADDRESS}:32414:32414/udp
        environment:
            - PLEX_CLAIM=${PMSTOKEN}
            - ADVERTISE_IP=http://${IP_ADDRESS}:32400/
            - ALLOWED_NETWORKS=${CIDR_ADDRESS}
            - PLEX_UID=${PUID} 
            - PLEX_GID=${PGID}
        hostname: ${HOSTNAME}
        volumes:
            - './plex:/config'
            - './plex/transcode:/transcode'
            - './content/tv:/data/tvshows'
            - './content/movies:/data/movies'
            - '/etc/localtime:/etc/localtime:ro'    

    # ----------------------------------------
    # Networking
    # ----------------------------------------

    arch-delugevpn:
        image: binhex/arch-delugevpn
        container_name: delugevpn
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:8112:8112'
            - '${IP_ADDRESS}:8118:8118'
            - '${IP_ADDRESS}:58846:58846'
            - '${IP_ADDRESS}:58946:58946'
        cap_add:
            - NET_ADMIN
        environment:
            - PUID=${PUID}
            - PGID=${PGID}
        volumes:
            - './content:/data'
            - './delugevpn/config:/config'
            - '/etc/localtime:/etc/localtime:ro'


    # ----------------------------------------
    # Support Services
    # ----------------------------------------

    minio:
        image: minio/minio
        container_name: minio
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:9009:9000'
        environment:
            - MINIO_ACCESS_KEY=minio
            - MINIO_SECRET_KEY=minio123
        volumes:
            - '${PWD}:/export'
        command: server /export

    portainer:
        image: portainer/portainer
        container_name: portainer
        restart: always
        network_mode: "bridge"
        ports:
            - '${IP_ADDRESS}:9000:9000'
        volumes:
            - './portainer:/data'
            - '/var/run/docker.sock:/var/run/docker.sock'
            - '/etc/localtime:/etc/localtime:ro'
        command: ${PORTAINERSTYLE}